:toc:

== How to...

==== Collapse to single cursor after using multiple cursors / Keep only primary cursor
- Use the default keybind `,` bound to the `keep_primary_selection` command.

==== Map `jk` or `jj` to exit insert mode

- Add this to your https://docs.helix-editor.com/configuration.html#configuration[`config.toml`]:
+
[source,toml]
----
[keys.insert]
j = {k = "normal_mode"}
----

==== Use my terminal's 16 color palette as a theme

- You can use color names like `red`, `light-blue`, etc to refer to
the terminal's colors in a theme file; refer the
https://docs.helix-editor.com/themes.html#color-palettes[theme color palette]
documentation.

==== Perform find-and-replace

- Type `%` to select the entire file, then `s` to bring up a `select:` prompt. Enter your search, and press enter. All matches in the file will be selected; you can now use `c` to change them all simultaneously.

==== Access the Helix config directory

[cols="1,1"]
|===
| Platform | Location
| Mac OS/Linux
| `~/.config/helix`
| Windows
| `C:\Users\\____\AppData\Roaming\helix`
|===

==== Access the log file

[cols="1,1"]
|===
| Platform | Location
| Mac OS/Linux
| `~/.cache/helix/helix.log` 
| Windows
| `C:\Users\\____\AppData\Local\helix\helix.log`
|===

==== Adding a language

All languages are defined in https://github.com/helix-editor/helix/blob/master/languages.toml[`languages.toml`] which should be copied into your config folder. However, Helix already embeds the file within the binary and will automatically merge that with any new `languages.toml` file you create. Add a new entry like so:

```toml
[[language]]
# This is the name of the language. It will correspond to the tree-sitter grammar (we'll get to that later).
name = "<language>"
# This is the tree-sitter scope that identifies the language.
scope = "scope.<language>"
# This is the used in injection queries to determine if this language should be used there.
injection-regex = ""
# An array of file type suffix strings for which this language will be used on (e.g. "rs" for Rust).
file-types = []
# Does nothing at the moment.
roots = []

# Whether files of this language should be LSP auto-formatted.
auto-format = true
# The text insert for commenting out code (e.g. "//" for Rust).
comment-token = ""
# The LSP executable. It should be either an absolute path, or the name of the executable if it is in $PATH.
# There is a problem for Windows users where LSPs in $PATH are not called, see https://github.com/helix-editor/helix/wiki/Troubleshooting#on-windows
language-server = { command = "" }
# Indentation for the language. This will be overridden based on the file's 
indent = { tab-width = 4, unit = "    " }

# This is the LSP config, see https://github.com/helix-editor/helix/pull/807
[language.config]
```

If you want syntax highlighting, you'll also want to build the associated tree-sitter grammar for the language. To do this, add it as a submodule to `helix-syntax` via:

```sh
$ git submodule add --shallow <repository> helix-syntax/languages/tree-sitter-<name>
```

and in case new grammars were added:

```sh
$ git submodule update --init
```

Then you'll have to add highlighting queries for the language in `runtime/queries/<language>`. Currently, we only support `highlights.scm`, `locals.scm`, `injections.scm`, `textobjects.scm`, and `indents.toml`. It is not necessary you define all of these files, and `highlights.scm` is the minimum needed for syntax highlighting. While most tree-sitter repositories will provide default queries, it's recommended that you use the ones from https://github.com/nvim-treesitter/nvim-treesitter[`nvim-treesitter`] because they usually offer superior highlighting. It's recommended you read https://tree-sitter.github.io/tree-sitter/syntax-highlighting#basics[tree-sitter's docs on queries] as you'll likely have to modify them to use https://docs.helix-editor.com/themes.html#scopes[the scopes used by Helix.]

== General Questions

==== How to write plugins / Is there a plugin system in place yet ?

* It's currently under discussion, with the general plan of using WebAssembly to
provide plugin support. Some links regarding ongoing discussions:
 ** https://github.com/helix-editor/helix/issues/122[Initial discussion]
 ** https://github.com/helix-editor/helix/discussions/580[Pre-RFC discussion]
 ** https://github.com/helix-editor/helix/pull/455[Plugin system MVP]